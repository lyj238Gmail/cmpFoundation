(*  Title:      HOL/Auth/n_mutualEx_base.thy
    Author:     Yongjian Li and Kaiqiang Duan, State Key Lab of Computer Science, Institute of Software, Chinese Academy of Sciences
    Copyright    2016 State Key Lab of Computer Science, Institute of Software, Chinese Academy of Sciences
*)

header{*The n_mutualEx Protocol Case Study*} 

theory n_mutualEx_base imports paraTheory
begin

section{*Main definitions*}

subsection{* Definitions of Constants*}
definition I::"scalrValueType" where [simp]: "I\<equiv> enum ''control'' ''I''"
definition T::"scalrValueType" where [simp]: "T\<equiv> enum ''control'' ''T''"
definition C::"scalrValueType" where [simp]: "C\<equiv> enum ''control'' ''C''"
definition E::"scalrValueType" where [simp]: "E\<equiv> enum ''control'' ''E''"
definition true::"scalrValueType" where [simp]: "true\<equiv> boolV True"
definition false::"scalrValueType" where [simp]: "false\<equiv> boolV False"



subsection{*  Definitions of Parameterized Rules *}

definition n_Try::"nat \<Rightarrow> rule" where [simp]:
"n_Try  i\<equiv>
let g = (eqn (IVar (Para (Ident ''n'') i)) (Const I)) in
let s = (parallelList [(assign ((Para (Ident ''n'') i), (Const T)))]) in
guard g s"

definition n_Crit::"nat \<Rightarrow> rule" where [simp]:
"n_Crit  i\<equiv>
let g = (andForm (eqn (IVar (Para (Ident ''n'') i)) (Const T)) (eqn (IVar (Ident ''x'')) (Const true))) in
let s = (parallelList [(assign ((Para (Ident ''n'') i), (Const C))), (assign ((Ident ''x''), (Const false)))]) in
guard g s"

definition n_Exit::"nat \<Rightarrow> rule" where [simp]:
"n_Exit  i\<equiv>
let g = (eqn (IVar (Para (Ident ''n'') i)) (Const C)) in
let s = (parallelList [(assign ((Para (Ident ''n'') i), (Const E)))]) in
guard g s"

definition n_Idle::"nat \<Rightarrow> rule" where [simp]:
"n_Idle  i\<equiv>
let g = (eqn (IVar (Para (Ident ''n'') i)) (Const E)) in
let s = (parallelList [(assign ((Para (Ident ''n'') i), (Const I))), (assign ((Ident ''x''), (Const true)))]) in
guard g s"

definition n_Crit_i_3::"nat \<Rightarrow> rule" where [simp]:
"n_Crit_i_3 N \<equiv>
let g = (andForm (andForm (eqn (IVar (Ident ''x'')) (Const true)) (forallForm (down N) (\<lambda>i. (neg (eqn (IVar (Para (Ident ''n'') i)) (Const E)))))) (forallForm (down N) (\<lambda>i. (neg (eqn (IVar (Para (Ident ''n'') i)) (Const C)))))) in
let s = (parallelList [(assign ((Ident ''x''), (Const false)))]) in
guard g s"

definition n_Idle_i_3::"nat \<Rightarrow> rule" where [simp]:
"n_Idle_i_3 N \<equiv>
let g = (andForm (andForm (andForm (andForm (forallForm (down N) (\<lambda>i. (neg (eqn (IVar (Para (Ident ''n'') i)) (Const E))))) (forallForm (down N) (\<lambda>i. (neg (eqn (IVar (Para (Ident ''n'') i)) (Const C)))))) (eqn (IVar (Ident ''x'')) (Const false))) (forallForm (down N) (\<lambda>j. (neg (eqn (IVar (Para (Ident ''n'') j)) (Const E)))))) (forallForm (down N) (\<lambda>j. (neg (eqn (IVar (Para (Ident ''n'') j)) (Const C)))))) in
let s = (parallelList [(assign ((Ident ''x''), (Const true)))]) in
guard g s"

subsection{*The set of All actual Rules w.r.t. a Protocol Instance with Size $N$*}
definition rules::"nat \<Rightarrow> rule set" where [simp]:
"rules N \<equiv> {r.
(\<exists> i. i\<le>N\<and>r=n_Try  i) \<or>
(\<exists> i. i\<le>N\<and>r=n_Crit  i) \<or>
(\<exists> i. i\<le>N\<and>r=n_Exit  i) \<or>
(\<exists> i. i\<le>N\<and>r=n_Idle  i) \<or>
(r=n_Crit_i_3 N ) \<or>
(r=n_Idle_i_3 N )
}"



subsection{*Definitions of a Formally Parameterized Invariant Formulas*}

definition inv_34::"nat \<Rightarrow> nat \<Rightarrow> formula" where [simp]:
"inv_34 j i \<equiv>
(neg (implyForm (andForm (neg (eqn (IVar (Para (Ident ''n'') i)) (Const I))) (neg (eqn (IVar (Para (Ident ''n'') i)) (Const T)))) (neg (eqn (IVar (Para (Ident ''n'') j)) (Const E)))))"

definition inv_33::"nat \<Rightarrow> formula" where [simp]:
"inv_33 j \<equiv>
(neg (implyForm (eqn (IVar (Para (Ident ''n'') j)) (Const E)) (eqn (IVar (Ident ''x'')) (Const false))))"

definition inv_32::"nat \<Rightarrow> nat \<Rightarrow> formula" where [simp]:
"inv_32 j i \<equiv>
(neg (implyForm (eqn (IVar (Para (Ident ''n'') j)) (Const E)) (neg (eqn (IVar (Para (Ident ''n'') i)) (Const C)))))"

definition inv_30::"nat \<Rightarrow> formula" where [simp]:
"inv_30 i \<equiv>
(neg (implyForm (eqn (IVar (Ident ''x'')) (Const true)) (neg (eqn (IVar (Para (Ident ''n'') i)) (Const E)))))"

definition inv_26::"nat \<Rightarrow> nat \<Rightarrow> formula" where [simp]:
"inv_26 j i \<equiv>
(neg (implyForm (andForm (neg (eqn (IVar (Para (Ident ''n'') j)) (Const T))) (neg (eqn (IVar (Para (Ident ''n'') j)) (Const I)))) (neg (eqn (IVar (Para (Ident ''n'') i)) (Const E)))))"

definition inv_22::"nat \<Rightarrow> formula" where [simp]:
"inv_22 j \<equiv>
(neg (implyForm (andForm (neg (eqn (IVar (Para (Ident ''n'') j)) (Const T))) (neg (eqn (IVar (Para (Ident ''n'') j)) (Const I)))) (eqn (IVar (Ident ''x'')) (Const false))))"

definition inv_16::"nat \<Rightarrow> formula" where [simp]:
"inv_16 i \<equiv>
(neg (implyForm (eqn (IVar (Ident ''x'')) (Const true)) (neg (eqn (IVar (Para (Ident ''n'') i)) (Const C)))))"

definition inv_15::"nat \<Rightarrow> nat \<Rightarrow> formula" where [simp]:
"inv_15 j i \<equiv>
(neg (implyForm (eqn (IVar (Para (Ident ''n'') j)) (Const E)) (neg (eqn (IVar (Para (Ident ''n'') i)) (Const E)))))"

definition inv_11::"nat \<Rightarrow> nat \<Rightarrow> formula" where [simp]:
"inv_11 j i \<equiv>
(neg (implyForm (andForm (neg (eqn (IVar (Para (Ident ''n'') i)) (Const I))) (neg (eqn (IVar (Para (Ident ''n'') i)) (Const T)))) (neg (eqn (IVar (Para (Ident ''n'') j)) (Const C)))))"

definition inv_4::"nat \<Rightarrow> nat \<Rightarrow> formula" where [simp]:
"inv_4 j i \<equiv>
(neg (implyForm (andForm (neg (eqn (IVar (Para (Ident ''n'') j)) (Const T))) (neg (eqn (IVar (Para (Ident ''n'') j)) (Const I)))) (neg (eqn (IVar (Para (Ident ''n'') i)) (Const C)))))"

definition inv_1::"nat \<Rightarrow> formula" where [simp]:
"inv_1 i \<equiv>
(neg (implyForm (andForm (neg (eqn (IVar (Para (Ident ''n'') i)) (Const I))) (neg (eqn (IVar (Para (Ident ''n'') i)) (Const T)))) (eqn (IVar (Ident ''x'')) (Const false))))"

subsection{*Definitions of  the Set of Invariant Formula Instances in a $N$-protocol Instance*}
definition invariants::"nat \<Rightarrow> formula set" where [simp]:
"invariants N \<equiv> {f.
(\<exists> j i. j\<le>N\<and>i\<le>N\<and>j~=i\<and>f=inv_34  j i) \<or>
(\<exists> j. j\<le>N\<and>f=inv_33  j) \<or>
(\<exists> j i. j\<le>N\<and>i\<le>N\<and>j~=i\<and>f=inv_32  j i) \<or>
(\<exists> i. i\<le>N\<and>f=inv_30  i) \<or>
(\<exists> j i. j\<le>N\<and>i\<le>N\<and>j~=i\<and>f=inv_26  j i) \<or>
(\<exists> j. j\<le>N\<and>f=inv_22  j) \<or>
(\<exists> i. i\<le>N\<and>f=inv_16  i) \<or>
(\<exists> j i. j\<le>N\<and>i\<le>N\<and>j~=i\<and>f=inv_15  j i) \<or>
(\<exists> j i. j\<le>N\<and>i\<le>N\<and>j~=i\<and>f=inv_11  j i) \<or>
(\<exists> j i. j\<le>N\<and>i\<le>N\<and>j~=i\<and>f=inv_4  j i) \<or>
(\<exists> i. i\<le>N\<and>f=inv_1  i)
}"



subsection{*Definitions of initial states*}

lemma lemmaOnn_TryLeNc:
  assumes a1:"i\<le>NC" 
  shows "trans_sim_on1 (n_Try i) (n_Try i) (set invariantsAbs) s" (is "trans_sim_on1 ?r ?r ?F s")
proof(rule ruleSimId)
  show  "∀v. v∈varOfForm (pre ?r) ⟶  v ∈(varOfFormList invariantsAbs) "
    by(cut_tac a1, auto) 
    
next
  show  b1: "∀v a. a ∈ set (statement2Assigns (act ?r)) ⟶ v∈varOfExp ( substExpByStatement (IVar (fst a))  (act ?r))⟶v ∈varOfFormList invariantsAbs "
   proof(cut_tac a1,(rule allI)+,(rule impI)+,auto) qed
    
 qed
lemma lemmaOnn_Try: 
  assumes   a2:"s ∈ reachableSet (set (allInitSpecs N)) (rules N)"  and  
  a4:"∀f.  f ∈(set invariantsAbs) ⟶  formEval f s" and a5:"\<exists> i. i\<le>N\<and>r=n_Try  i"
  shows "∃ r'. r' ∈ rulesAbs NC∧ trans_sim_on1 r r' (set invariantsAbs) s" (is "∃r'.?P1 r' ∧ ?P2 r'")
proof -
  from a5 obtain i where d0:"i\<le>N\<and>r=n_Try  i"  by blast
  have "i\<le> NC" by auto
  moreover{
       assume a1:"i\<le> NC" 
        have "∃r'. ?P1 r' ∧ ?P2 r'"
        proof(rule_tac x="(n_Try i)" in exI,rule conjI)
          show  "?P1 (n_Try i) " 
           by(cut_tac a1, auto) 
          next
          show  "?P2 (n_Try i) "
           using lemmaOnn_Try__i local.a1 d0 by blast 
        qed
       }
  ultimately show "∃r'.?P1 r' ∧ ?P2 r'" 
    by satx
qed

lemma lemmaOnn_CritGt:
  assumes a1:"i>NC" and 
  a2:"s ∈ reachableSet (set (allInitSpecs N)) (rules N)"  and a3:"NC<N" and  
  a4:"∀f.  f ∈(set invariantsAbs) ⟶  formEval f s" 
  shows "trans_sim_on1 (n_Crit i)  (n_Crit_i_3  NC) (set invariantsAbs) s" (is "trans_sim_on1 ?r ?r' (set ?F) s")
  proof(rule ruleSimCond1)
    show " formEval (pre ?r) s ⟶formEval (pre ?r') s" (is "?A ⟶?B")
    proof(rule impI)+
      assume b0:"?A"
  from a4  have tmp:"formEval (inv_30 0)  s"   
            by (force simp del:inv_30_def) 
        have tmp1:"formEval (inv_30 i  ) s" 
        proof(cut_tac a1 a2 a3 tmp,rule axiomOnf1,force+)qed
        with b0  have c0:"formEval  (conclude (inv_30 i)) s" by auto
from a4  have tmp:"formEval (inv_16 0)  s"   
            by (force simp del:inv_16_def) 
        have tmp1:"formEval (inv_16 i  ) s" 
        proof(cut_tac a1 a2 a3 tmp,rule axiomOnf1,force+)qed
        with b0  have c1:"formEval  (conclude (inv_16 i)) s" by auto

      from b1 c0 c1 show "formEval (pre ?r') s" 
       by auto
     qed
   next 
	show "(∀  v. v ∈  varOfSent (act  ?r') ⟶  v ∈ varOfFormList ?F ⟶ formEval (pre ?r) s ⟶ 
    expEval (substExpByStatement (IVar v)  (act ?r')) s = expEval (substExpByStatement (IVar v)  (act ?r)) s)"
   proof(rule allI,(rule impI)+)
      fix  v
     assume b1:"v∈ (varOfFormList invariantsAbs)"  and b2:"formEval (pre ?r) s" and b3:"v ∈varOfSent (act ?r')"
  
  show "expEval (substExpByStatement (IVar v)  (act ?r')) s = expEval (substExpByStatement (IVar v)  (act ?r)) s"  
       apply (cut_tac  a1 b1 b2 ,auto) done
   qed
 next
   show "∀  v. v ∈  varOfSent (act ?r) ⟶  v ∈ varOfFormList ?F ⟶ v ∈  varOfSent (act ?r')" by(cut_tac a1, auto)

  
 next 
   show "∀ v va. v ∈ varOfSent (act ?r') ⟶va∈varOfExp ( substExpByStatement (IVar v)  (act ?r'))⟶ va ∈ (varOfFormList ?F)"
     by auto  
 next
   show "∀v. v ∈ varOfForm (pre (?r')) ⟶ v ∈ varOfFormList ?F" by auto
qed
lemma lemmaOnn_CritLeNc:
  assumes a1:"i\<le>NC" 
  shows "trans_sim_on1 (n_Crit i) (n_Crit i) (set invariantsAbs) s" (is "trans_sim_on1 ?r ?r ?F s")
proof(rule ruleSimId)
  show  "∀v. v∈varOfForm (pre ?r) ⟶  v ∈(varOfFormList invariantsAbs) "
    by(cut_tac a1, auto) 
    
next
  show  b1: "∀v a. a ∈ set (statement2Assigns (act ?r)) ⟶ v∈varOfExp ( substExpByStatement (IVar (fst a))  (act ?r))⟶v ∈varOfFormList invariantsAbs "
   proof(cut_tac a1,(rule allI)+,(rule impI)+,auto) qed
    
 qed
lemma lemmaOnn_Crit: 
  assumes   a2:"s ∈ reachableSet (set (allInitSpecs N)) (rules N)"  and  
  a4:"∀f.  f ∈(set invariantsAbs) ⟶  formEval f s" and a5:"\<exists> i. i\<le>N\<and>r=n_Crit  i"
  shows "∃ r'. r' ∈ rulesAbs NC∧ trans_sim_on1 r r' (set invariantsAbs) s" (is "∃r'.?P1 r' ∧ ?P2 r'")
proof -
  from a5 obtain i where d0:"i\<le>N\<and>r=n_Crit  i"  by blast
  have "i>NC|i\<le> NC" by auto
  moreover{
       assume a1:"i>NC" 
        have "∃r'. ?P1 r' ∧ ?P2 r'"
        proof(rule_tac x="(n_Crit  NC)" in exI,rule conjI)
          show  "?P1 (n_Crit  NC) " 
           by(cut_tac a1, auto) 
          next
          show  "?P2 (n_Crit  NC) "
           using lemmaOnn_Crit_i_ local.a1 d0 by blast 
        qed
       }
moreover{
       assume a1:"i\<le> NC" 
        have "∃r'. ?P1 r' ∧ ?P2 r'"
        proof(rule_tac x="(n_Crit i)" in exI,rule conjI)
          show  "?P1 (n_Crit i) " 
           by(cut_tac a1, auto) 
          next
          show  "?P2 (n_Crit i) "
           using lemmaOnn_Crit__i local.a1 d0 by blast 
        qed
       }
  ultimately show "∃r'.?P1 r' ∧ ?P2 r'" 
    by satx
qed

lemma lemmaOnn_ExitLeNc:
  assumes a1:"i\<le>NC" 
  shows "trans_sim_on1 (n_Exit i) (n_Exit i) (set invariantsAbs) s" (is "trans_sim_on1 ?r ?r ?F s")
proof(rule ruleSimId)
  show  "∀v. v∈varOfForm (pre ?r) ⟶  v ∈(varOfFormList invariantsAbs) "
    by(cut_tac a1, auto) 
    
next
  show  b1: "∀v a. a ∈ set (statement2Assigns (act ?r)) ⟶ v∈varOfExp ( substExpByStatement (IVar (fst a))  (act ?r))⟶v ∈varOfFormList invariantsAbs "
   proof(cut_tac a1,(rule allI)+,(rule impI)+,auto) qed
    
 qed
lemma lemmaOnn_Exit: 
  assumes   a2:"s ∈ reachableSet (set (allInitSpecs N)) (rules N)"  and  
  a4:"∀f.  f ∈(set invariantsAbs) ⟶  formEval f s" and a5:"\<exists> i. i\<le>N\<and>r=n_Exit  i"
  shows "∃ r'. r' ∈ rulesAbs NC∧ trans_sim_on1 r r' (set invariantsAbs) s" (is "∃r'.?P1 r' ∧ ?P2 r'")
proof -
  from a5 obtain i where d0:"i\<le>N\<and>r=n_Exit  i"  by blast
  have "i\<le> NC" by auto
  moreover{
       assume a1:"i\<le> NC" 
        have "∃r'. ?P1 r' ∧ ?P2 r'"
        proof(rule_tac x="(n_Exit i)" in exI,rule conjI)
          show  "?P1 (n_Exit i) " 
           by(cut_tac a1, auto) 
          next
          show  "?P2 (n_Exit i) "
           using lemmaOnn_Exit__i local.a1 d0 by blast 
        qed
       }
  ultimately show "∃r'.?P1 r' ∧ ?P2 r'" 
    by satx
qed

lemma lemmaOnn_IdleGt:
  assumes a1:"i>NC" and 
  a2:"s ∈ reachableSet (set (allInitSpecs N)) (rules N)"  and a3:"NC<N" and  
  a4:"∀f.  f ∈(set invariantsAbs) ⟶  formEval f s" 
  shows "trans_sim_on1 (n_Idle i)  (n_Idle_i_3  NC) (set invariantsAbs) s" (is "trans_sim_on1 ?r ?r' (set ?F) s")
  proof(rule ruleSimCond1)
    show " formEval (pre ?r) s ⟶formEval (pre ?r') s" (is "?A ⟶?B")
    proof(rule impI)+
      assume b0:"?A"
  from a4  have tmp:"formEval (inv_34 0 1)  s"   
            by (force simp del:inv_34_def) 
        have tmp1:"formEval (inv_34 i 0  ) s" 
        proof(cut_tac a1 a2 a3 tmp,rule axiomOnf2,force+)qed
        with b0  have c0:"formEval  (conclude (inv_34 i 0)) s" by auto
from a4  have tmp:"formEval (inv_34 0 1)  s"   
            by (force simp del:inv_34_def) 
        have tmp1:"formEval (inv_34 i 1  ) s" 
        proof(cut_tac a1 a2 a3 tmp,rule axiomOnf2,force+)qed
        with b0  have c1:"formEval  (conclude (inv_34 i 1)) s" by auto
from a4  have tmp:"formEval (inv_33 0)  s"   
            by (force simp del:inv_33_def) 
        have tmp1:"formEval (inv_33 i  ) s" 
        proof(cut_tac a1 a2 a3 tmp,rule axiomOnf1,force+)qed
        with b0  have c2:"formEval  (conclude (inv_33 i)) s" by auto
from a4  have tmp:"formEval (inv_32 0 1)  s"   
            by (force simp del:inv_32_def) 
        have tmp1:"formEval (inv_32 i 0  ) s" 
        proof(cut_tac a1 a2 a3 tmp,rule axiomOnf2,force+)qed
        with b0  have c3:"formEval  (conclude (inv_32 i 0)) s" by auto
from a4  have tmp:"formEval (inv_32 0 1)  s"   
            by (force simp del:inv_32_def) 
        have tmp1:"formEval (inv_32 i 1  ) s" 
        proof(cut_tac a1 a2 a3 tmp,rule axiomOnf2,force+)qed
        with b0  have c4:"formEval  (conclude (inv_32 i 1)) s" by auto
from a4  have tmp:"formEval (inv_26 0 1)  s"   
            by (force simp del:inv_26_def) 
        have tmp1:"formEval (inv_26 i 0  ) s" 
        proof(cut_tac a1 a2 a3 tmp,rule axiomOnf2,force+)qed
        with b0  have c5:"formEval  (conclude (inv_26 i 0)) s" by auto
from a4  have tmp:"formEval (inv_26 0 1)  s"   
            by (force simp del:inv_26_def) 
        have tmp1:"formEval (inv_26 i 1  ) s" 
        proof(cut_tac a1 a2 a3 tmp,rule axiomOnf2,force+)qed
        with b0  have c6:"formEval  (conclude (inv_26 i 1)) s" by auto
from a4  have tmp:"formEval (inv_22 0)  s"   
            by (force simp del:inv_22_def) 
        have tmp1:"formEval (inv_22 i  ) s" 
        proof(cut_tac a1 a2 a3 tmp,rule axiomOnf1,force+)qed
        with b0  have c7:"formEval  (conclude (inv_22 i)) s" by auto
from a4  have tmp:"formEval (inv_15 0 1)  s"   
            by (force simp del:inv_15_def) 
        have tmp1:"formEval (inv_15 i 0  ) s" 
        proof(cut_tac a1 a2 a3 tmp,rule axiomOnf2,force+)qed
        with b0  have c8:"formEval  (conclude (inv_15 i 0)) s" by auto
from a4  have tmp:"formEval (inv_15 0 1)  s"   
            by (force simp del:inv_15_def) 
        have tmp1:"formEval (inv_15 i 1  ) s" 
        proof(cut_tac a1 a2 a3 tmp,rule axiomOnf2,force+)qed
        with b0  have c9:"formEval  (conclude (inv_15 i 1)) s" by auto
from a4  have tmp:"formEval (inv_11 0 1)  s"   
            by (force simp del:inv_11_def) 
        have tmp1:"formEval (inv_11 i 0  ) s" 
        proof(cut_tac a1 a2 a3 tmp,rule axiomOnf2,force+)qed
        with b0  have c10:"formEval  (conclude (inv_11 i 0)) s" by auto
from a4  have tmp:"formEval (inv_11 0 1)  s"   
            by (force simp del:inv_11_def) 
        have tmp1:"formEval (inv_11 i 1  ) s" 
        proof(cut_tac a1 a2 a3 tmp,rule axiomOnf2,force+)qed
        with b0  have c11:"formEval  (conclude (inv_11 i 1)) s" by auto
from a4  have tmp:"formEval (inv_4 0 1)  s"   
            by (force simp del:inv_4_def) 
        have tmp1:"formEval (inv_4 i 0  ) s" 
        proof(cut_tac a1 a2 a3 tmp,rule axiomOnf2,force+)qed
        with b0  have c12:"formEval  (conclude (inv_4 i 0)) s" by auto
from a4  have tmp:"formEval (inv_4 0 1)  s"   
            by (force simp del:inv_4_def) 
        have tmp1:"formEval (inv_4 i 1  ) s" 
        proof(cut_tac a1 a2 a3 tmp,rule axiomOnf2,force+)qed
        with b0  have c13:"formEval  (conclude (inv_4 i 1)) s" by auto
from a4  have tmp:"formEval (inv_1 0)  s"   
            by (force simp del:inv_1_def) 
        have tmp1:"formEval (inv_1 i  ) s" 
        proof(cut_tac a1 a2 a3 tmp,rule axiomOnf1,force+)qed
        with b0  have c14:"formEval  (conclude (inv_1 i)) s" by auto

      from b1 c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 show "formEval (pre ?r') s" 
       by auto
     qed
   next 
	show "(∀  v. v ∈  varOfSent (act  ?r') ⟶  v ∈ varOfFormList ?F ⟶ formEval (pre ?r) s ⟶ 
    expEval (substExpByStatement (IVar v)  (act ?r')) s = expEval (substExpByStatement (IVar v)  (act ?r)) s)"
   proof(rule allI,(rule impI)+)
      fix  v
     assume b1:"v∈ (varOfFormList invariantsAbs)"  and b2:"formEval (pre ?r) s" and b3:"v ∈varOfSent (act ?r')"
  
  show "expEval (substExpByStatement (IVar v)  (act ?r')) s = expEval (substExpByStatement (IVar v)  (act ?r)) s"  
       apply (cut_tac  a1 b1 b2 ,auto) done
   qed
 next
   show "∀  v. v ∈  varOfSent (act ?r) ⟶  v ∈ varOfFormList ?F ⟶ v ∈  varOfSent (act ?r')" by(cut_tac a1, auto)

  
 next 
   show "∀ v va. v ∈ varOfSent (act ?r') ⟶va∈varOfExp ( substExpByStatement (IVar v)  (act ?r'))⟶ va ∈ (varOfFormList ?F)"
     by auto  
 next
   show "∀v. v ∈ varOfForm (pre (?r')) ⟶ v ∈ varOfFormList ?F" by auto
qed
lemma lemmaOnn_IdleLeNc:
  assumes a1:"i\<le>NC" 
  shows "trans_sim_on1 (n_Idle i) (n_Idle i) (set invariantsAbs) s" (is "trans_sim_on1 ?r ?r ?F s")
proof(rule ruleSimId)
  show  "∀v. v∈varOfForm (pre ?r) ⟶  v ∈(varOfFormList invariantsAbs) "
    by(cut_tac a1, auto) 
    
next
  show  b1: "∀v a. a ∈ set (statement2Assigns (act ?r)) ⟶ v∈varOfExp ( substExpByStatement (IVar (fst a))  (act ?r))⟶v ∈varOfFormList invariantsAbs "
   proof(cut_tac a1,(rule allI)+,(rule impI)+,auto) qed
    
 qed
lemma lemmaOnn_Idle: 
  assumes   a2:"s ∈ reachableSet (set (allInitSpecs N)) (rules N)"  and  
  a4:"∀f.  f ∈(set invariantsAbs) ⟶  formEval f s" and a5:"\<exists> i. i\<le>N\<and>r=n_Idle  i"
  shows "∃ r'. r' ∈ rulesAbs NC∧ trans_sim_on1 r r' (set invariantsAbs) s" (is "∃r'.?P1 r' ∧ ?P2 r'")
proof -
  from a5 obtain i where d0:"i\<le>N\<and>r=n_Idle  i"  by blast
  have "i>NC|i\<le> NC" by auto
  moreover{
       assume a1:"i>NC" 
        have "∃r'. ?P1 r' ∧ ?P2 r'"
        proof(rule_tac x="(n_Idle  NC)" in exI,rule conjI)
          show  "?P1 (n_Idle  NC) " 
           by(cut_tac a1, auto) 
          next
          show  "?P2 (n_Idle  NC) "
           using lemmaOnn_Idle_i_ local.a1 d0 by blast 
        qed
       }
moreover{
       assume a1:"i\<le> NC" 
        have "∃r'. ?P1 r' ∧ ?P2 r'"
        proof(rule_tac x="(n_Idle i)" in exI,rule conjI)
          show  "?P1 (n_Idle i) " 
           by(cut_tac a1, auto) 
          next
          show  "?P2 (n_Idle i) "
           using lemmaOnn_Idle__i local.a1 d0 by blast 
        qed
       }
  ultimately show "∃r'.?P1 r' ∧ ?P2 r'" 
    by satx
qed


end
